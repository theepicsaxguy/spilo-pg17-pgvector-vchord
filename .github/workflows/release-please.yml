# .github/workflows/release-please.yml
name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      # It's good practice to output the commit SHA for the release
      # This might require an extra step if release-please doesn't output it directly
      # commit_sha: ${{ steps.release.outputs.sha }} # Or fetch it later
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json

  build-and-push:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    env: # <--- Add TEMP_SPILO_BASE_TAG here
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      SPILO_BASE_IMAGE_NAME: ${{ github.repository_owner }}/spilo-base-pg17 # For pushed base image
      TEMP_SPILO_BASE_TAG: spilo-base-temp:latest # For local tagging within buildx

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Get commit SHA for the release tag
        id: get_sha
        run: echo "RELEASE_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Spilo base specifically for this release
      - name: Build and Cache Spilo Base Image (Intermediate for Release)
        uses: docker/build-push-action@v6
        with:
          context: ./spilo-upstream/postgres-appliance
          file: ./spilo-upstream/postgres-appliance/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.TEMP_SPILO_BASE_TAG }} # Use the locally defined temp tag
          build-args: |
            PGVERSION=17
            DEB_PG_SUPPORTED_VERSIONS=17
          # Cache this release-specific base build
          outputs: type=cacheonly,dest=spilo-base-release-cache-${{ needs.release-please.outputs.tag_name }}
          cache-from: type=cacheonly,src=spilo-base-release-cache-${{ needs.release-please.outputs.tag_name }}

      - name: Extract metadata for Final Release Image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=latest

      - name: Build and Push Final Release Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Your Dockerfile uses SPILO_BASE_IMAGE_TAG build-arg.
          # For release, we tell it to use the TEMP_SPILO_BASE_TAG which was just built.
          build-args: |
            SPILO_BASE_IMAGE_TAG=${{ env.TEMP_SPILO_BASE_TAG }}
          # Utilize the cached intermediate base image
          cache-from: |
            type=cacheonly,src=spilo-base-release-cache-${{ needs.release-please.outputs.tag_name }}
            type=gha
          cache-to: type=gha,mode=max

      - name: Create image tags list for release asset
        run: |
          echo "Docker Images Pushed:" > image-tags.txt
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> image-tags.txt
          echo "" >> image-tags.txt
          echo "Primary tag for this release: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.tag_name }}" >> image-tags.txt

      - name: Upload image tags as release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: image-tags.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}