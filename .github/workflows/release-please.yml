# .github/workflows/release-please.yml (Existing file, minor update)
name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json

  build-and-push:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      TEMP_SPILO_BASE_IMAGE: spilo-base-temp:latest # Ensure consistency with build.yml

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true # Fetch the submodule content (essential for this workflow too!)
          ref: ${{ needs.release-please.outputs.tag_name }} # Checkout the tag being released

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # New step: Build Spilo Base Image from Source (Local to Runner for Release)
      # This ensures the released image uses the submodule state from the *released tag*
      - name: Build Spilo Base Image from Source (Local to Runner for Release)
        run: |
          docker build \
            -t ${{ env.TEMP_SPILO_BASE_IMAGE }} \
            ./spilo-upstream/postgres-appliance # Corrected path

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=latest # Ensure 'latest' is always pushed with a release

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile # Your Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create image tags list for release asset
        run: |
          echo "Docker Images Pushed:" > image-tags.txt
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> image-tags.txt
          echo "" >> image-tags.txt
          echo "Primary tag for this release: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.tag_name }}" >> image-tags.txt

      - name: Upload image tags as release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            image-tags.txt # Attach the generated list of image tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}