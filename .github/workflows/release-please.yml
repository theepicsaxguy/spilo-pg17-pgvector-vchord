name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json

  build_release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    env:
      REGISTRY: ghcr.io
      BASE_IMAGE_NAME: ${{ github.repository_owner }}/spilo-base-pg17
      FINAL_IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for existing base image
        id: base_check
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          LAST_BASE_COMMIT=$(git log -1 --format="%H" -- spilo-upstream/)
          
          # Try multiple tag patterns that build.yml creates
          CANDIDATE_TAGS=(
            "sha-${COMMIT_SHA}"           # If this commit changed spilo-upstream
            "sha-${LAST_BASE_COMMIT}"     # Most likely - last commit that changed spilo-upstream
            "release-candidate"           # From main branch builds
            "latest"                      # Fallback
          )
          
          FOUND_TAG=""
          for tag in "${CANDIDATE_TAGS[@]}"; do
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${tag} > /dev/null 2>&1; then
              echo "Found existing base image: ${tag}"
              FOUND_TAG="${tag}"
              break
            fi
          done
          
          if [[ -n "${FOUND_TAG}" ]]; then
            echo "base_tag=${FOUND_TAG}" >> $GITHUB_OUTPUT
            echo "build_base=false" >> $GITHUB_OUTPUT
          else
            echo "No base image found, will build: sha-${COMMIT_SHA}"
            echo "base_tag=sha-${COMMIT_SHA}" >> $GITHUB_OUTPUT
            echo "build_base=true" >> $GITHUB_OUTPUT
          fi

      - name: Build base image
        if: steps.base_check.outputs.build_base == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./spilo-upstream/postgres-appliance
          file: ./spilo-upstream/postgres-appliance/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.base_check.outputs.base_tag }}
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ needs.release-please.outputs.tag_name }}-base
          build-args: |
            PGVERSION=17
            DEB_PG_SUPPORTED_VERSIONS=17
          cache-from: |
            type=gha,scope=${{ env.BASE_IMAGE_NAME }}-main
            type=registry,ref=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest
          cache-to: |
            type=gha,mode=max,scope=${{ env.BASE_IMAGE_NAME }}-release

      - name: Extract metadata for final image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FINAL_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=latest

      - name: Build and push final image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: | 
            SPILO_BASE_IMAGE_TAG=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.base_check.outputs.base_tag }}
          cache-from: |
            type=gha,scope=${{ env.FINAL_IMAGE_NAME }}-main
            type=registry,ref=${{ env.REGISTRY }}/${{ env.FINAL_IMAGE_NAME }}:latest
          cache-to: |
            type=gha,mode=max,scope=${{ env.FINAL_IMAGE_NAME }}-release

      - name: Create release summary
        run: |
          echo "Release ${{ needs.release-please.outputs.tag_name }} built successfully" >> $GITHUB_STEP_SUMMARY
          echo "Base image: ${{ steps.base_check.outputs.base_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Base image built: ${{ steps.base_check.outputs.build_base }}" >> $GITHUB_STEP_SUMMARY