# .github/workflows/build.yml
name: Build Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Tag for the Spilo base image we'll push
  SPILO_BASE_IMAGE_NAME: ${{ github.repository_owner }}/spilo-base-pg17 # Or just spilo-base if PG version is fixed
  # Temporary local tag for buildx context, not strictly needed if we always push/pull the base
  TEMP_SPILO_BASE_TAG: spilo-base-temp:latest

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build_and_push_base_and_final: # Renamed job for clarity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Base Image Tag
        id: base_image_tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else # push to main (could be direct or from update-upstream merge)
            echo "TAG=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      # Step 1: Build AND PUSH Spilo Base Image from Source
      - name: Build and Push Spilo Base Image (Intermediate)
        uses: docker/build-push-action@v6
        with:
          context: ./spilo-upstream/postgres-appliance
          file: ./spilo-upstream/postgres-appliance/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true # Push this base image
          tags: ${{ env.REGISTRY }}/${{ env.SPILO_BASE_IMAGE_NAME }}:${{ steps.base_image_tag.outputs.TAG }}
          build-args: |
            PGVERSION=17
            DEB_PG_SUPPORTED_VERSIONS=17
          # Cache this build too, for faster rebuilds of the base itself if submodule changes
          cache-from: type=gha,scope=${{ env.SPILO_BASE_IMAGE_NAME }}-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ env.SPILO_BASE_IMAGE_NAME }}-${{ github.ref_name }}

      - name: Extract metadata for Final Image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # We use the pushed base image tag for consistency in metadata if needed
          # For the final image, tags are specific to this event
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }},enable=${{ github.event_name == 'pull_request' }}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=sha,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      # Step 2: Build and Push Final Docker Image using the PUSHED base
      - name: Build and Push Final Docker Image (with vchord)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Build argument to pass the exact base image tag to your Dockerfile
          build-args: |
            SPILO_BASE_IMAGE_TAG=${{ env.REGISTRY }}/${{ env.SPILO_BASE_IMAGE_NAME }}:${{ steps.base_image_tag.outputs.TAG }}
          # Cache the final image layers
          cache-from: type=gha
          cache-to: type=gha,mode=max