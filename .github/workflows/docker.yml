name: Build and Push Docker Image

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # Build and validate image on PRs (no push)
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            
      - name: Build Docker image (validation only)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test image functionality
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: test-image:latest
          cache-from: type=gha
          
      - name: Verify extensions are installable
        run: |
          # Start container in background
          docker run -d --name test-db \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=testdb \
            test-image:latest
            
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if docker exec test-db pg_isready -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Test extension creation
          echo "Testing extension creation..."
          docker exec test-db psql -U postgres -d testdb -c "
            CREATE EXTENSION IF NOT EXISTS pgvector;
            CREATE EXTENSION IF NOT EXISTS vchord;
            
            -- Test basic vector operations
            CREATE TABLE test_vectors (id serial, embedding vector(3));
            INSERT INTO test_vectors (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');
            SELECT * FROM test_vectors ORDER BY embedding <-> '[1,2,3]' LIMIT 1;
            
            -- Test VectorChord index creation
            CREATE INDEX test_vchord_idx ON test_vectors USING vchord (embedding vector_l2_ops);
            
            -- Verify extensions are installed
            SELECT extname, extversion FROM pg_extension WHERE extname IN ('vector', 'vchord');
          "
          
          echo "âœ… Extension validation successful"
          
          # Cleanup
          docker stop test-db
          docker rm test-db

  # Build and push on main/releases
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning (only after successful build)
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'