name: Build and Push Docker Image

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image (amd64 only for testing)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test extensions
        run: |
          # Start container
          docker run --rm -d --name test-pg \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=test \
            -e POSTGRES_USER=postgres \
            -e PGUSER=postgres \
            -e PGPASSWORD=test \
            -e SCOPE=ci \
            -e PGVERSION=17 \
            test-image:latest
          
          # Wait for PostgreSQL to be ready
          timeout 60s bash -c 'until docker exec test-pg pg_isready -U postgres; do sleep 2; done'
          
          # Test pgvector extension
          echo "Testing pgvector extension..."
          docker exec test-pg psql -U postgres -d test -c "CREATE EXTENSION IF NOT EXISTS pgvector;"
          docker exec test-pg psql -U postgres -d test -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'pgvector';"
          
          # Test vchord extension
          echo "Testing vchord extension..."
          docker exec test-pg psql -U postgres -d test -c "CREATE EXTENSION IF NOT EXISTS vchord;"
          docker exec test-pg psql -U postgres -d test -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'vchord';"
          
          # Test vector operations with both extensions
          echo "Testing vector operations..."
          docker exec test-pg psql -U postgres -d test -c "
            CREATE TABLE test_vectors (id serial PRIMARY KEY, embedding vector(3));
            INSERT INTO test_vectors (embedding) VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]');
            
            -- Test pgvector operations
            SELECT id, embedding, embedding <-> '[1,2,3]' AS l2_distance FROM test_vectors ORDER BY l2_distance LIMIT 2;
            SELECT id, embedding, embedding <=> '[1,2,3]' AS cosine_distance FROM test_vectors ORDER BY cosine_distance LIMIT 2;
            
            -- Test vchord index creation
            CREATE INDEX test_vchord_idx ON test_vectors USING vchord (embedding vector_l2_ops);
            
            -- Verify index was created
            SELECT indexname FROM pg_indexes WHERE tablename = 'test_vectors' AND indexname = 'test_vchord_idx';
          "
          
          # Cleanup
          docker stop test-pg

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'